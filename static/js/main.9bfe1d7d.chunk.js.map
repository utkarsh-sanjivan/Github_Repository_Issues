{"version":3,"sources":["component/Header/index.js","store/IssueList/actions.js","store/IssueList/constants.js","component/Notification/index.js","component/InputField/index.js","utils/localStorage.js","container/IssueSearch/index.js","component/TableDetails/index.js","container/IssueList/index.js","component/StatusTag/index.js","utils/dateFormatter.js","container/IssueDetails/index.js","router.js","utils/axios.js","api/api.issues.js","store/IssueList/sagas.js","store/sagas.js","store/IssueList/reducers.js","store/reducers.js","index.js","store/index.js"],"names":["IssueHeader","props","className","window","location","pathname","includes","fetchRepoIssues","payload","type","updateSeatcText","getCommentsForIssue","fetchSingleIssue","notify","notification","open","style","marginLeft","duration","placement","Search","Input","InputField","onSearch","onPressEnter","placeholder","enterButton","key","value","localStorage","getItem","JSON","parse","stringify","error","setItem","IssueSearch","state","event","target","split","length","user","repo","localStore","issueListActions","page","history","push","message","icon","CloseCircleOutlined","twoToneColor","React","PureComponent","connect","store","issueList","dispatch","bindActionCreators","IssueListActions","TableDetails","columns","title","dataIndex","width","render","tagArr","record","map","backgroundColor","color","border","name","onClick","number","src","avatar_url","marginTop","loading","dataSource","active","description","pagination","position","defaultPageSize","current","showSizeChanger","IssueList","onHandleChangeTable","filters","sorter","Object","keys","setState","sortOrder","pageNumber","this","issueListLoading","prevProps","issueListError","LeftOutlined","marginRight","onChange","searchText","StatusTag","closable","text","getMonthString","month","formatDateString","dateString","date","moment","currentMonth","months","currentYear","year","dateMonth","dateYear","monthEqual","yearEqual","diffDays","diff","diffHours","diffMinutes","IssueDetails","currentIssue","find","issue","toString","match","params","issueId","commentsList","commentList","id","issueLoading","CheckOutlined","CloseOutlined","login","created_at","source","body","labels","commentListLoading","comment","Routing","HashRouter","basename","Switch","Route","exact","path","component","instance","axios","create","baseURL","headers","fetchRepoIssuesAPI","a","url","get","response","status","data","raisedBy","getCommentsForIssueAPI","fetchSinglessueAPI","fetchRepoIssuesSaga","getCommentsForIssueSaga","fetchSingleIssueSaga","userSaga","action","parameters","call","responseBody","put","request","all","takeLatest","root","fork","INITIAL_STATE","commentListError","issueError","reducer","combineReducers","issueListReducer","createHistory","initialState","sagaMiddleware","createSagaMiddleware","routeMiddleware","routerMiddleware","createStore","createRootReducers","compose","applyMiddleware","run","sagas","buildStore","ReactDOM","document","getElementById"],"mappings":"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","file":"static/js/main.9bfe1d7d.chunk.js","sourcesContent":["import React from 'react';\nimport './style.css';\n\nconst IssueHeader = props => {\n  return (\n    <div className=\"issues-page-header-wrapper\">\n      <div className=\"issues-page-header-title\">{window.location.pathname === '/'? 'Issue  Search': window.location.pathname.includes('issue-details')? 'Issue Details':'Issue List'}</div>\n      <div className=\"issues-page-header-sub-title\">{window.location.pathname.includes('issue-details')? null: 'Search issues from a public repository of a user'}</div>\n    </div>\n  );\n}\n\nexport default IssueHeader;\n","import { \n    FETCH_REPO_ISSUES_REQUESTED,\n    UPDATE_SEARCH_TEXT,\n    GET_COMMENTS_FOR_ISSUE_REQUESTED,\n    FETCH_SINGLE_ISSUE_REQUESTED,\n} from './constants';\n\nexport function fetchRepoIssues(payload) {\n    return {\n        type: FETCH_REPO_ISSUES_REQUESTED,\n        payload,\n    };\n};\nexport function updateSeatcText(payload) {\n    return {\n        type: UPDATE_SEARCH_TEXT,\n        payload,\n    };\n};\n\nexport function getCommentsForIssue(payload) {\n    return {\n        type: GET_COMMENTS_FOR_ISSUE_REQUESTED,\n        payload,\n    };\n}\n\nexport function fetchSingleIssue(payload) {\n    return {\n        type: FETCH_SINGLE_ISSUE_REQUESTED,\n        payload,\n    };\n}\n","export const  FETCH_REPO_ISSUES_REQUESTED = \n    'api/issueList/FETCH_REPO_ISSUES_REQUESTED';\nexport const  FETCH_REPO_ISSUES_SUCCESS = \n    'api/issueList/FETCH_REPO_ISSUES_SUCCESS';\nexport const  FETCH_REPO_ISSUES_FAILURE = \n    'api/issueList/FETCH_REPO_ISSUES_FAILURE';\nexport const UPDATE_SEARCH_TEXT =\n    'api/issueList/UPDATE_SEARCH_TEXT';\nexport  const GET_COMMENTS_FOR_ISSUE_REQUESTED = \n    'api/issueList/GET_COMMENTS_FOR_ISSUE_REQUESTED';\nexport  const GET_COMMENTS_FOR_ISSUE_SUCCESS = \n    'api/issueList/GET_COMMENTS_FOR_ISSUE_SUCCESS';\nexport  const GET_COMMENTS_FOR_ISSUE_ERRORED = \n    'api/issueList/GET_COMMENTS_FOR_ISSUE_ERRORED';\nexport const  FETCH_SINGLE_ISSUE_REQUESTED = \n    'api/issueList/FETCH_SINGLE_ISSUE_REQUESTED';\nexport const  FETCH_SINGLE_ISSUE_SUCCESS = \n    'api/issueList/FETCH_SINGLE_ISSUE_SUCCESS';\nexport const  FETCH_SINGLE_ISSUE_FAILURE = \n    'api/issueList/FETCH_SINGLE_ISSUE_FAILURE';","import { notification } from 'antd';\nimport './style.css';\n\nconst notify = props => {\n  notification.open({\n    style: {   \n      marginLeft:20,\n    },\n    duration: 3,\n    placement: 'bottomLeft',\n    ...props,\n});\n}\n\nexport default notify;\n","import React from 'react';\nimport { Input } from 'antd';\nimport './style.css';\n\nconst { Search } = Input;\nconst InputField = props => (\n    <Search\n        {...props}\n        onSearch={props.onPressEnter}\n        placeholder=\"username/repo\"\n        className=\"issues-search-field\"\n        enterButton=\"Search\"\n    />\n);\n\nexport default InputField;\n","export default {\n\tgetItem: (key) => {\n\t\ttry {\n\t\t\tconst value = localStorage.getItem(key);\n\t\t    return JSON.parse(value ? value : JSON.stringify(null));\n\t    } catch (error) {\n\t    \treturn error\n\t    }\n\t},\n\n\tsetItem: (key, value) => {\n\t\ttry {\n\t\t    return localStorage.setItem(key, JSON.stringify(value));\n\t    } catch (error) {\n\t    \treturn error\n\t    }\n\t},\n\n}","import React from 'react';\nimport { connect } from \"react-redux\";\nimport { bindActionCreators } from 'redux';\nimport { CloseCircleOutlined } from '@ant-design/icons';\nimport * as IssueListActions from './../../store/IssueList/actions';\nimport notify from '../../component/Notification';\nimport InputField from '../../component/InputField';\nimport localStore from './../../utils/localStorage';\nimport './style.css';\n\nclass IssueSearch extends React.PureComponent {\n  constructor (props) {\n    super(props);\n    this.state = {};\n  }\n  \n  render () {\n    return (\n      <div className=\"issue-search-wrapper\">\n        <div className=\"issue-search-desc-text\">Search Issues</div>\n        <InputField \n          onPressEnter={event => {\n            const value = event.target? event.target.value: event;\n            if (value.split('/').length>1) {\n              const user = value.split('/')[0];\n              const repo = value.split('/')[1];\n              localStore.setItem('searchParams', { user, repo });\n              this.props.issueListActions.fetchRepoIssues({ user, repo, page: 1 });\n              this.props.history.push('/Github_Repository_Issues/issue-list');\n            } else {\n              notify({\n                message: 'Please type in user/repo format',\n                placement: 'topRight',\n                icon: <CloseCircleOutlined twoToneColor='#ed3833' className='notification-icon'/>,\n              });\n            }\n          }}\n        />\n        <div className=\"issue-search-desc-info\">Type 'user/repo' to find the issues</div>\n      </div>\n    );\n  }\n}\n\nconst mapStateToProps = ( store ) => ({\n    issueList: store.issueList,\n});\n\nfunction mapDispatchToProps(dispatch) {\n    return {\n      issueListActions: bindActionCreators(IssueListActions, dispatch),\n    }\n}\n\nexport default  connect(mapStateToProps, mapDispatchToProps)(IssueSearch);\n","import React from 'react';\nimport { Table, Empty, Skeleton, Avatar } from 'antd';\nimport './style.css';\n\nconst TableDetails = props => {\n  const columns = [\n    {\n      title: 'Labels',\n      dataIndex: 'labels',\n      width: '300px',\n      key: 'labels',\n      render: (tagArr, record) => (\n        <div className='table-label-cells'>\n          {tagArr.map(value => (\n            <span \n              style={{ \n                backgroundColor: `#${value.color}`,\n                color: `${value.color === 'ffffff'? '#000000': '#ffffff'}`,\n                border: `${value.color === 'ffffff'? '#9ca2a8 1px solid': 'none'}`,\n              }}\n              className=\"table-issue-tag\"\n            >\n              {value.name}\n            </span>\n          ))}\n        </div>\n      ),\n    },\n    {\n      title: 'Title',\n      dataIndex: 'title',\n      key: 'title',\n      render: (value, record) => (\n        <div>\n          <div onClick={() => window.open(`/Github_Repository_Issues/issue-details/${record.number}`, '_blank')} className=\"issue-title-container\">{value}</div>\n          <div style={{ backgroundColor: `${record.open? '#28a745': '#f50'}` }} className=\"issue-sub-title-container\">{record.open? 'Open': 'Close'}</div>\n        </div>\n      ),\n    },\n    {\n      title: 'Raised By',\n      dataIndex: 'raisedBy',\n      key: 'raisedBy',\n      render: (value, record) => (\n        <div>\n          <Avatar src={record.user.avatar_url} className='table-raisedby-avatar'/>\n          <span className=\"issue-title-container\">{value}</span>\n        </div>\n      ),\n    },\n  ];\n\n  return (\n    <div style={{ marginTop: '25px' }}>\n      {props.loading && props.dataSource.length<31?\n        <Skeleton \n          loading={true}\n          active\n        />\n        : props.dataSource.length === 0?\n          <Empty \n            className=\"table-empty-image\"\n            description={'No Issues Available'}\n          />\n          : <Table \n            {...props}\n            dataSource={props.dataSource}\n            columns={columns}\n            pagination={{  position:  'bottom', defaultPageSize: 30, current: props.current, showSizeChanger: false }}\n          />}\n    </div>\n  );\n};\n\nexport default TableDetails;\n","import React from 'react';\nimport { connect } from \"react-redux\";\nimport { bindActionCreators } from 'redux';\nimport { CloseCircleOutlined, LeftOutlined } from '@ant-design/icons';\nimport * as IssueListActions from './../../store/IssueList/actions';\nimport notify from '../../component/Notification';\nimport InputField from '../../component/InputField';\nimport TableDetails from '../../component/TableDetails';\nimport localStore from './../../utils/localStorage';\nimport './style.css';\n\nclass IssueList extends React.PureComponent {\n  constructor (props) {\n    super(props);\n    this.state = {\n      issueList: this.props.issueList.issueList || [],\n      pageNumber: 1,\n    };\n  }\n\n  componentDidMount () {\n    if (this.props.issueList.issueList.length === 0 && !this.props.issueList.issueListLoading) {\n      const { user, repo } = localStore.getItem('searchParams');\n      this.props.issueListActions.fetchRepoIssues({ user, repo, page: 1 });\n    }\n  }\n\n  componentDidUpdate(prevProps) {\n    if ( JSON.stringify(prevProps.issueList.issueList) !== JSON.stringify(this.props.issueList.issueList) ) {\n      this.setState({ issueList: this.props.issueList.issueList }, () => {\n        if (this.props.issueList.issueList.length === 30) {\n          const { user, repo } = localStore.getItem('searchParams');\n          this.props.issueListActions.fetchRepoIssues({ user, repo, page: this.state.pageNumber+1 });\n        };\n      });\n    }\n    if (\n      prevProps.issueList.issueListError !== this.props.issueList.issueListError &&\n      this.props.issueList.issueListError\n    ) {\n      notify({\n        message: 'Internal Server Error',\n        placement: 'topRight',\n        icon: <CloseCircleOutlined twoToneColor='#ed3833' className='notification-icon'/>,\n      });\n    }\n  }\n  \n  render () {\n    return (\n      <div className=\"issue-list-wrapper\">\n        <div>\n          <div className=\"issue-list-back-div\" onClick={() => this.props.history.push('/Github_Repository_Issues/')}>\n            <LeftOutlined style={{ marginRight: '5px' }}/> Go Back\n          </div>\n        </div>\n        <InputField \n          loading={this.props.issueList.issueListLoading}\n          onPressEnter={event => {\n            const value = event.target? event.target.value: event\n            if (value.split('/').length>1) {\n              const user = value.split('/')[0];\n              const repo = value.split('/')[1];\n              localStore.setItem('searchParams', { user, repo });\n              this.setState({ pageNumber: 1 })\n              this.props.issueListActions.fetchRepoIssues({ user, repo, page: 1 });\n              this.props.history.push('/Github_Repository_Issues/issue-list');\n            } else {\n              notify({\n                message: 'Please type in user/repo format',\n                placement: 'topRight',\n                icon: <CloseCircleOutlined twoToneColor='red' className='notification-icon'/>,\n              });\n            }\n          }}\n          onChange={event => {\n            this.props.issueListActions.updateSeatcText(event.target.value);\n          }}\n          value={this.props.issueList.searchText}\n        />\n        <TableDetails \n          current={this.state.pageNumber}\n          dataSource={this.state.issueList}\n          loading={this.props.issueList.issueListLoading}\n          onChange={this.onHandleChangeTable}\n        />\n      </div>\n    );\n  }\n\n  onHandleChangeTable = (pagination, filters, sorter) => {\n    if (Object.keys(sorter).length>0) {\n      this.setState({\n        sortOrder: sorter,\n      });\n    }\n\n    if (Object.keys(pagination).length>0) {\n      this.setState({\n        pageNumber: pagination.current,\n      }, () => {\n        if (pagination.current*30 === this.props.issueList.issueList.length) {\n          const { user, repo } = localStore.getItem('searchParams');\n          this.props.issueListActions.fetchRepoIssues({ \n            user,\n            repo,\n            page: this.state.pageNumber+1,\n          });\n        }\n      });\n    };\n  }\n}\n\nconst mapStateToProps = ( store ) => ({\n    issueList: store.issueList,\n});\n\nfunction mapDispatchToProps(dispatch) {\n    return {\n      issueListActions: bindActionCreators(IssueListActions, dispatch),\n    }\n}\n\nexport default  connect(mapStateToProps, mapDispatchToProps)(IssueList);\n","import React from 'react';\nimport { Tag } from 'antd';\nimport './style.css';\n\nconst StatusTag = props => (\n    <Tag\n        {...props}\n        closable={false}\n        className=\"issue-status-tag\"\n    >\n        {props.text}\n    </Tag>\n);\nexport default StatusTag;\n","import moment from 'moment';\n\nfunction getMonthString(month) {\n    const monthArr = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'];\n    return monthArr[month];\n}\n\nexport function formatDateString(dateString) {\n    const date = moment(dateString);\n    const currentMonth = moment().months();\n    const currentYear = moment().year();\n    const dateMonth = date.months();    \n    const dateYear = date.year();   \n    const monthEqual = currentMonth === dateMonth;\n    const yearEqual = currentYear === dateYear;\n    if (!yearEqual) return `on ${date.date()} ${getMonthString(dateMonth)} ${dateYear}`;\n    else if (yearEqual && !monthEqual) return `on ${date.date()} ${getMonthString(dateMonth)}`;\n    else if (yearEqual && monthEqual) {\n        const diffDays = moment().diff(date, 'days');\n        if (diffDays === 0) {\n            const diffHours = moment().diff(date, 'hour');\n            if (diffHours === 0) {\n                const diffMinutes = moment().diff(date, 'minutes');\n                if (diffMinutes === 0) return ' just now';\n                else return ` ${diffMinutes} ${diffMinutes === 1? 'minute': 'minutes'} ago`;\n            } else return ` ${diffHours} ${diffHours === 1? 'hour': 'hours'} ago`;\n        } else return ` ${diffDays} ${diffDays === 1? 'day': 'days'} ago`; \n    }\n}\n","import React from 'react';\nimport { connect } from \"react-redux\";\nimport { bindActionCreators } from 'redux';\nimport MarkdownGithub from 'react-markdown-github';\nimport { Skeleton, Avatar } from 'antd';\nimport { CheckOutlined, CloseOutlined } from '@ant-design/icons';\nimport * as IssueListActions from './../../store/IssueList/actions';\nimport StatusTag from './../../component/StatusTag/index';\nimport { formatDateString } from './../../utils/dateFormatter';\nimport localStore from './../../utils/localStorage';\nimport './style.css';\n\nclass IssueDetails extends React.PureComponent {\n  constructor (props) {\n    super(props);\n    this.state = {\n        currentIssue: this.props.issueList.issueList.find(issue => issue.number.toString() === this.props.match.params.issueId),\n        commentsList: [],\n    };\n  }\n\n    componentDidMount() {\n        const { user, repo } = localStore.getItem('searchParams');\n        this.props.issueListActions.getCommentsForIssue({ user, repo, issue: this.props.match.params.issueId });\n        if (!this.state.currentIssue) {\n            this.props.issueListActions.fetchSingleIssue({ user, repo, issue: this.props.match.params.issueId });\n        }\n    }\n\n    componentDidUpdate(prevProps) {\n        if ( JSON.stringify(prevProps.issueList.commentList) !== JSON.stringify(this.props.issueList.commentList) ) {\n           this.setState({ commentList: this.props.issueList.commentList });\n        }\n        if (\n            prevProps.issueList.issue.id !== this.props.issueList.issue.id &&\n            prevProps.issueList.issue.number !== this.props.issueList.issue.number\n        ) {\n           this.setState({ currentIssue: this.props.issueList.issue });\n        }\n    }\n  \n    render () {\n        return (\n        this.props.issueList.issueLoading?\n            <Skeleton \n                className=\"details-skeleton\"\n                loading={true}\n                active\n            />\n            : <div className=\"issue-details-wrapper\">\n                <div className=\"issue-details-title\">{this.state.currentIssue && this.state.currentIssue.title}</div>\n                <div className=\"issue-details-sub-title\">\n                    <StatusTag\n                        color={this.state.currentIssue && this.state.currentIssue.state === 'open'? '#28a745': '#f50'}\n                        icon={this.state.currentIssue && this.state.currentIssue.state === 'open'? \n                            <CheckOutlined twoToneColor='#28a745' />\n                            : <CloseOutlined twoToneColor='#f50' />\n                        }\n                        text={this.state.currentIssue && this.state.currentIssue.state === 'open'? 'Open': 'Close'}\n                    />\n                    <span><b>{this.state.currentIssue && this.state.currentIssue.user.login}</b> openened this issue {this.state.currentIssue && formatDateString(this.state.currentIssue.created_at)}, {this.props.issueList.commentList.length} comments</span>\n                </div>\n                <div className=\"issue-details-description-container\">\n                    <div className=\"issue-desc-header\">\n                        <Avatar src={this.state.currentIssue && this.state.currentIssue.user.avatar_url} className='issue-details-raisedby-avatar'/>\n                        <span className=\"issue-details-raisedby-description\"><b>{this.state.currentIssue && this.state.currentIssue.user.login}</b> {this.state.currentIssue && ` posted ${formatDateString(this.state.currentIssue.created_at)}`}</span>\n                    </div>\n                    <MarkdownGithub \n                        source={this.state.currentIssue && this.state.currentIssue.body}\n                        className='issue-details-description-content'\n                    />\n                </div>\n                <div className=\"tags-container\">\n                    {this.state.currentIssue && this.state.currentIssue.labels.map(value => (\n                        <span \n                            style={{ \n                                backgroundColor: `#${value.color}`,\n                                color: `${value.color === '000'? '#fff': '#000'}`,\n                                border: `${value.color === 'ffffff'? '#9ca2a8 1px solid': 'none'}`,\n                            }}\n                            className=\"issue-tag-card\"\n                        >\n                            {value.name}\n                        </span>\n                        ))}\n                </div>\n                <div className=\"issue-details-comment-container\">\n                    { this.props.issueList.commentListLoading?\n                        <Skeleton \n                            className=\"comments-skeleton\"\n                            loading={true}\n                            active\n                        />\n                        : this.state.commentList && this.state.commentList.map(comment => (\n                            <div className=\"issue-details-description-container\">\n                                <div className=\"issue-desc-header\">\n                                    <Avatar src={comment.user.avatar_url} className='issue-details-raisedby-avatar'/>\n                                    <span className=\"issue-details-raisedby-description\"><b>{comment.user.login}</b> {this.state.currentIssue && ` commented ${formatDateString(comment.created_at)}`}</span>\n                                </div>\n                                <MarkdownGithub \n                                    source={comment.body}\n                                    className='issue-details-description-content'\n                                />\n                            </div>\n                        ))\n                    }\n                </div>\n            </div>\n        );\n    }\n\n}\n\nconst mapStateToProps = ( store ) => ({\n    issueList: store.issueList,\n});\n\nfunction mapDispatchToProps(dispatch) {\n    return {\n      issueListActions: bindActionCreators(IssueListActions, dispatch),\n    }\n}\n\nexport default  connect(mapStateToProps, mapDispatchToProps)(IssueDetails);\n","import React from 'react'\nimport { Route, Switch, HashRouter } from 'react-router-dom';\nimport IssueHeader from './component/Header/index';\nimport IssueSearch from './container/IssueSearch/index';\nimport IssueList from './container/IssueList/index';\nimport IssueDetails from './container/IssueDetails/index';\n\nconst Routing = props => (\n  <div>\n    <IssueHeader />\n    <HashRouter basename='/'>\n      <Switch>\n        <Route exact path=\"/Github_Repository_Issues\" component={IssueSearch} />\n        <Route exact path=\"/Github_Repository_Issues/issue-list\" component={IssueList} />\n        <Route exact path=\"/Github_Repository_Issues/issue-details/:issueId\" component={IssueDetails} />\n      </Switch>\n    </HashRouter>\n  </div>\n)\n\nexport default Routing;\n","import axios from 'axios';\n\nconst instance = axios.create({\n\tbaseURL: 'https://api.github.com/',\n\theaders: {\n\t\t'Content-Type': 'application/json',\n\t},\n});\n\nexport { instance as default };","import axios from './../utils/axios';\n\nexport async function fetchRepoIssuesAPI(params) {\n  const url = `/repos/${params.user}/${params.repo}/issues?page=${params.page}&state=all`;\n  const response = await axios.get(url, {});\n  const isSuccess = response.status >=200 && response.status < 300;\n  if (isSuccess) {\n    return response.data.map(issue => ({\n      ...issue,\n      key: issue.id,\n      raisedBy: issue.user.login,\n      open: issue.state === 'open',\n    }));\n  }\n  throw response.status;\n}\n\nexport async function getCommentsForIssueAPI(params) {\n  const url = `/repos/${params.user}/${params.repo}/issues/${params.issue}/comments`;\n  const response = await axios.get(url, {});\n  const isSuccess = response.status >=200 && response.status < 300;\n  if (isSuccess) {\n    return response.data;\n  }\n  throw response.status;\n}\n\nexport async function fetchSinglessueAPI(params) {\n  const url = `/repos/${params.user}/${params.repo}/issues/${params.issue}`;\n  const response = await axios.get(url, {});\n  const isSuccess = response.status >=200 && response.status < 300;\n  if (isSuccess) {\n    return response.data;\n  }\n  throw response.status;\n}\n","import { all, call, put, takeLatest } from 'redux-saga/effects';\nimport { \n    FETCH_REPO_ISSUES_REQUESTED,\n    FETCH_REPO_ISSUES_SUCCESS,\n    FETCH_REPO_ISSUES_FAILURE,\n    GET_COMMENTS_FOR_ISSUE_REQUESTED,\n    GET_COMMENTS_FOR_ISSUE_SUCCESS,\n    GET_COMMENTS_FOR_ISSUE_ERRORED,\n    FETCH_SINGLE_ISSUE_REQUESTED,\n    FETCH_SINGLE_ISSUE_SUCCESS,\n    FETCH_SINGLE_ISSUE_FAILURE,\n} from './constants';\nimport {\n    fetchRepoIssuesAPI,\n    getCommentsForIssueAPI,\n    fetchSinglessueAPI\n} from '../../api/api.issues';\n\nfunction* fetchRepoIssuesSaga(action) {\n    try {\n        const parameters = { ...action.payload };\n        const responseBody = yield call(fetchRepoIssuesAPI, parameters);\n        yield put({\n            type: FETCH_REPO_ISSUES_SUCCESS,\n            payload: responseBody,\n        });\n    } catch (err) {\n        if (err.request.status === 404) {\n            yield put({\n                type: FETCH_REPO_ISSUES_SUCCESS,\n                payload: [],\n            });\n        } else {\n            const payload = {\n                status: err.request.status,\n                message: err.message,\n            }\n            yield put({\n                type: FETCH_REPO_ISSUES_FAILURE,\n                payload,\n            });\n        }\n    };\n};\n\nfunction* getCommentsForIssueSaga(action) {\n    try {\n        const parameters = { ...action.payload };\n        const responseBody = yield call(getCommentsForIssueAPI, parameters);\n        yield put({\n            type: GET_COMMENTS_FOR_ISSUE_SUCCESS,\n            payload: responseBody,\n        });\n    } catch (err) {\n        const payload = {\n            status: err.request.status,\n            message: err.message,\n        }\n        yield put({\n            type: GET_COMMENTS_FOR_ISSUE_ERRORED,\n            payload,\n        });\n    };\n};\n\nfunction* fetchSingleIssueSaga(action) {\n    try {\n        const parameters = { ...action.payload };\n        const responseBody = yield call(fetchSinglessueAPI, parameters);\n        yield put({\n            type: FETCH_SINGLE_ISSUE_SUCCESS,\n            payload: responseBody,\n        });\n    } catch (err) {\n        const payload = {\n            status: err.request.status,\n            message: err.message,\n        }\n        yield put({\n            type: FETCH_SINGLE_ISSUE_FAILURE,\n            payload,\n        });\n    };\n};\n\nexport default function* userSaga() {\n    yield all([\n        takeLatest(FETCH_REPO_ISSUES_REQUESTED, fetchRepoIssuesSaga),\n        takeLatest(GET_COMMENTS_FOR_ISSUE_REQUESTED, getCommentsForIssueSaga),\n        takeLatest(FETCH_SINGLE_ISSUE_REQUESTED, fetchSingleIssueSaga),\n    ]);\n};","import { fork } from 'redux-saga/effects'\nimport issueList from './IssueList/sagas';\n\nexport default function* root() {\n  yield fork(issueList);\n}","import { \n    FETCH_REPO_ISSUES_REQUESTED,\n    FETCH_REPO_ISSUES_SUCCESS,\n    FETCH_REPO_ISSUES_FAILURE,\n    UPDATE_SEARCH_TEXT,\n    GET_COMMENTS_FOR_ISSUE_REQUESTED,\n    GET_COMMENTS_FOR_ISSUE_SUCCESS,\n    GET_COMMENTS_FOR_ISSUE_ERRORED,\n    FETCH_SINGLE_ISSUE_REQUESTED,\n    FETCH_SINGLE_ISSUE_SUCCESS,\n    FETCH_SINGLE_ISSUE_FAILURE,\n} from './constants';\n\nconst INITIAL_STATE = {\n    searchText: '',\n    issueListLoading: false,\n    issueList: [],\n    issueListError: false,\n    commentListLoading: false,\n    commentList: [],\n    commentListError: false,\n    issueLoading: false,\n    issue: {},\n    issueError: false,\n};\n\nexport function reducer ( state = INITIAL_STATE, action) {\n    switch ( action.type ) {\n        case FETCH_REPO_ISSUES_REQUESTED:\n            return {\n                ...state,\n                searchText: `${action.payload.user}/${action.payload.repo}`,\n                issueListLoading: true,\n                issueList: action.payload.page === 1? []: state.issueList,\n                issueListError: false,\n            };\n\n        case FETCH_REPO_ISSUES_SUCCESS: \n            return {\n                ...state,\n                issueListLoading: false,\n                issueList: [ ...state.issueList, ...action.payload ],\n                issueListError: false,\n            };\n\n        case FETCH_REPO_ISSUES_FAILURE: \n            return {\n                ...state,\n                issueListLoading: false,\n                issueList: [],\n                issueListError: action.payload.status !== 404,\n            };\n\n        case UPDATE_SEARCH_TEXT:\n            return {\n                ...state,\n                searchText: action.payload,\n            };\n        \n        case GET_COMMENTS_FOR_ISSUE_REQUESTED:\n            return {\n                ...state,\n                commentListLoading: true,\n                commentList: [],\n                commentListError: false,\n            };\n\n        case GET_COMMENTS_FOR_ISSUE_SUCCESS:\n            return {\n                ...state,\n                commentListLoading: false,\n                commentList: action.payload,\n                commentListError: false,\n            };\n\n        case GET_COMMENTS_FOR_ISSUE_ERRORED:\n            return {\n                ...state,\n                commentListLoading: false,\n                commentList: [],\n                commentListError: true,\n            };\n\n        case FETCH_SINGLE_ISSUE_REQUESTED:\n            return {\n                ...state,\n                issueLoading: true,\n                issue: {},\n                issueError: false,\n            };\n\n        case FETCH_SINGLE_ISSUE_SUCCESS:\n            return {\n                ...state,\n                issueLoading: false,\n                issue: action.payload,\n                issueError: false,\n            };\n\n        case FETCH_SINGLE_ISSUE_FAILURE:\n            return {\n                ...state,\n                issueLoading: false,\n                issue: {},\n                issueError: true,\n            };\n\n        default: {\n            return {\n                ...state\n            }\n        }\n\n    };\n};","import { reducer as issueListReducer } from \"./IssueList/reducers\";\nimport { combineReducers } from 'redux';\n\nexport default (history) => combineReducers({\n  issueList: issueListReducer,\n});\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport Router from './router';\n// import * as serviceWorker from './serviceWorker';\nimport { ConnectedRouter } from 'react-router-redux';\nimport { Provider } from 'react-redux';\nimport createHistory from 'history/createBrowserHistory';\nimport { buildStore } from \"./store\";\n\nconst history = createHistory();\nconst store = buildStore(history, {});\n\nReactDOM.render(\n  <Provider store={store}>\n    <ConnectedRouter history={history}>\n      <Router />\n    </ConnectedRouter>\n  </Provider>,\n  document.getElementById('root')\n);\n\n// serviceWorker.unregister();\n","import { createStore, compose, applyMiddleware } from \"redux\";\nimport { routerMiddleware } from 'react-router-redux';\nimport createSagaMiddleware from \"redux-saga\";\nimport sagas from './sagas';\nimport createRootReducers from './reducers';\n\nexport const buildStore = ( history, initialState = {} ) => {\n\tconst sagaMiddleware = createSagaMiddleware(initialState = {});\n \tconst routeMiddleware = routerMiddleware(history);\n \t\n \tconst store = createStore(\n   \t\tcreateRootReducers(history),\n   \t\tinitialState,\n   \t\tcompose( \n    \t\tapplyMiddleware(sagaMiddleware, routeMiddleware)\n   \t\t)\n \t);\n\n \tsagaMiddleware.run(sagas);\n \treturn store;\n}"],"sourceRoot":""}